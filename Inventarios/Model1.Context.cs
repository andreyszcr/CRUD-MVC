//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Inventarios
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InventarioEntities : DbContext
    {
        public InventarioEntities()
            : base("name=InventarioEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Articulos> Articulos { get; set; }
        public virtual DbSet<Proveedores> Proveedores { get; set; }
    
        public virtual int ActualizarProveedores(string nombre, Nullable<bool> estado, Nullable<int> cedula, string direccion, Nullable<int> telefono)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(bool));
    
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(int));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarProveedores", nombreParameter, estadoParameter, cedulaParameter, direccionParameter, telefonoParameter);
        }
    
        public virtual int DesactivarProveedores(Nullable<int> cedula)
        {
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DesactivarProveedores", cedulaParameter);
        }
    
        public virtual int InsertarProveedores(string nombre, Nullable<bool> estado, Nullable<int> cedula, string direccion, Nullable<int> telefono)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(bool));
    
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(int));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarProveedores", nombreParameter, estadoParameter, cedulaParameter, direccionParameter, telefonoParameter);
        }
    
        public virtual ObjectResult<ObtenerListado_Result> ObtenerListado()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerListado_Result>("ObtenerListado");
        }
    
        public virtual int ActualizarArticulos(Nullable<int> codigoArticulos, string nombre, Nullable<bool> estado, Nullable<decimal> costo, Nullable<int> codigoProveedor)
        {
            var codigoArticulosParameter = codigoArticulos.HasValue ?
                new ObjectParameter("CodigoArticulos", codigoArticulos) :
                new ObjectParameter("CodigoArticulos", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(bool));
    
            var costoParameter = costo.HasValue ?
                new ObjectParameter("costo", costo) :
                new ObjectParameter("costo", typeof(decimal));
    
            var codigoProveedorParameter = codigoProveedor.HasValue ?
                new ObjectParameter("codigoProveedor", codigoProveedor) :
                new ObjectParameter("codigoProveedor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarArticulos", codigoArticulosParameter, nombreParameter, estadoParameter, costoParameter, codigoProveedorParameter);
        }
    
        public virtual int DesactivarArticulos(Nullable<int> codigoArticulos)
        {
            var codigoArticulosParameter = codigoArticulos.HasValue ?
                new ObjectParameter("CodigoArticulos", codigoArticulos) :
                new ObjectParameter("CodigoArticulos", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DesactivarArticulos", codigoArticulosParameter);
        }
    
        public virtual int InsertarArticulos(Nullable<int> codigoArticulos, string nombre, Nullable<bool> estado, Nullable<decimal> costo, Nullable<int> codigoProveedor)
        {
            var codigoArticulosParameter = codigoArticulos.HasValue ?
                new ObjectParameter("CodigoArticulos", codigoArticulos) :
                new ObjectParameter("CodigoArticulos", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(bool));
    
            var costoParameter = costo.HasValue ?
                new ObjectParameter("costo", costo) :
                new ObjectParameter("costo", typeof(decimal));
    
            var codigoProveedorParameter = codigoProveedor.HasValue ?
                new ObjectParameter("codigoProveedor", codigoProveedor) :
                new ObjectParameter("codigoProveedor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarArticulos", codigoArticulosParameter, nombreParameter, estadoParameter, costoParameter, codigoProveedorParameter);
        }
    }
}
